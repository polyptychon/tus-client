// Generated by CoffeeScript 1.8.0
(function() {
  var $, CheckFileExists, FileChecksum, PolyResumableUpload, Q, ResumableUpload;

  $ = require("jquery");

  Q = require("q");

  ResumableUpload = require("./ResumableUpload");

  PolyResumableUpload = require("./PolyResumableUpload");

  CheckFileExists = require("./CheckFileExists");

  FileChecksum = require("./FileChecksum");

  module.exports = {
    upload: function(file, options) {
      var deferred, upload;
      deferred = Q.defer();
      upload = new PolyResumableUpload(file, options);
      upload.fail(function(error, status) {
        return deferred.reject(new Error({
          error: error,
          status: status
        }));
      });
      upload.progress(function(e, bytesUploaded, bytesTotal) {
        var percentage;
        percentage = (bytesUploaded / bytesTotal * 100).toFixed(2);
        return deferred.notify(percentage);
      });
      upload.done(function(url, file, md5) {
        if (options.clientChecksum) {
          if (options.clientChecksum === md5) {
            return deferred.resolve({
              url: url,
              file: file,
              md5: md5
            });
          } else {
            return deferred.reject(new Error("Checksum does not match"));
          }
        } else {
          return deferred.resolve({
            url: url,
            file: file,
            md5: md5
          });
        }
      });
      if (file) {
        upload._start();
      }
      return deferred.promise;
    },
    check: function(file, options) {
      var check, deferred;
      deferred = Q.defer();
      check = new CheckFileExists(file, options);
      if (file) {
        check._checkFileExists();
      }
      check.fail(function(error, status) {
        return deferred.resolve(file);
      }).done(function(url, file) {
        return deferred.reject(new Error("File already exist"));
      });
      return deferred.promise;
    },
    checksum: function(file, options) {
      var checksum, deferred;
      deferred = Q.defer();
      checksum = new FileChecksum(file, options);
      checksum.progress(function(e, bytesUploaded, bytesTotal) {
        var percentage;
        percentage = (bytesUploaded / bytesTotal * 100).toFixed(2);
        return deferred.notify(percentage);
      });
      checksum.done(function(file, md5) {
        return deferred.resolve({
          file: file,
          md5: md5
        });
      });
      if (file) {
        checksum._computeChecksum(0);
      }
      return deferred.promise;
    },
    UploadSupport: ResumableUpload.SUPPORT
  };

}).call(this);

//# sourceMappingURL=Tus.js.map
