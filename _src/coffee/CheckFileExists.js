// Generated by CoffeeScript 1.8.0
(function() {
  var $, CheckFileExists;

  if (typeof jQuery === "undefined" || jQuery === null) {
    $ = require("jquery");
  }

  if ($ == null) {
    $ = jQuery;
  }

  CheckFileExists = (function() {
    CheckFileExists.DEFAULTS = {
      headers: {}
    };

    function CheckFileExists(files, options) {
      var file, _i, _len;
      this.files = files;
      this.options = $.extend(CheckFileExists.DEFAULTS, options);
      this.filenames = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        this.filenames.push(file.name);
      }
      this._jqXHR = null;
      this._deferred = $.Deferred();
      this._deferred.promise(this);
    }

    CheckFileExists.prototype._checkFiles = function() {
      var headers, options;
      headers = $.extend({}, this.options.headers);
      options = {
        type: 'POST',
        url: "" + this.options.endpoint + "check",
        cache: false,
        contentType: "application/json; charset=UTF-8",
        headers: headers,
        processData: false,
        data: JSON.stringify({
          "filenames": this.filenames
        })
      };
      return this._jqXHR = $.ajax(options).fail((function(_this) {
        return function(jqXHR, textStatus, errorThrown) {
          return _this._emitFail(textStatus, jqXHR.status);
        };
      })(this)).done((function(_this) {
        return function(data, textStatus, jqXHR) {
          var _ref;
          if ((data.results == null) || ((_ref = data.results) != null ? _ref.length : void 0) > 0) {
            return _this._emitFail(data.results);
          } else {
            return _this._emitDone();
          }
        };
      })(this));
    };

    CheckFileExists.prototype.stop = function() {
      if (this._jqXHR != null) {
        return this._jqXHR.abort();
      }
    };

    CheckFileExists.prototype._emitDone = function() {
      return this._deferred.resolveWith(this, [this.files]);
    };

    CheckFileExists.prototype._emitFail = function(err, status) {
      return this._deferred.rejectWith(this, [err, status]);
    };

    return CheckFileExists;

  })();

  module.exports = CheckFileExists;

}).call(this);

//# sourceMappingURL=CheckFileExists.js.map
