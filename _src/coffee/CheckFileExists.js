// Generated by CoffeeScript 1.8.0
(function() {
  var $, CheckFileExists;

  if (typeof jQuery === "undefined" || jQuery === null) {
    $ = require("jquery");
  }

  if ($ == null) {
    $ = jQuery;
  }

  CheckFileExists = (function() {
    CheckFileExists.DEFAULTS = {
      path: "",
      headers: {}
    };

    function CheckFileExists(file, options) {
      this.file = file;
      this.options = $.extend(CheckFileExists.DEFAULTS, options);
      this.fileUrl = null;
      this._jqXHR = null;
      this._deferred = $.Deferred();
      this._deferred.promise(this);
    }

    CheckFileExists.prototype._checkFileExists = function() {
      var headers, options;
      headers = $.extend({
        'file-path': "" + this.options.path + "/" + this.file.name
      }, this.options.headers);
      options = {
        type: 'HEAD',
        url: this.options.endpoint,
        cache: false,
        headers: headers
      };
      return $.ajax(options).fail((function(_this) {
        return function(jqXHR, textStatus, errorThrown) {
          if (jqXHR.status === 404) {
            return _this._emitFail("File not found: " + textStatus, jqXHR.status);
          } else {
            return _this._emitFail(textStatus, jqXHR.status);
          }
        };
      })(this)).done((function(_this) {
        return function(data, textStatus, jqXHR) {
          return _this._emitDone();
        };
      })(this));
    };

    CheckFileExists.prototype.stop = function() {
      if (this._jqXHR != null) {
        return this._jqXHR.abort();
      }
    };

    CheckFileExists.prototype._emitDone = function() {
      return this._deferred.resolveWith(this, [this.fileUrl, this.file]);
    };

    CheckFileExists.prototype._emitFail = function(err, status) {
      return this._deferred.rejectWith(this, [err, status]);
    };

    return CheckFileExists;

  })();

  module.exports = CheckFileExists;

}).call(this);

//# sourceMappingURL=CheckFileExists.js.map
