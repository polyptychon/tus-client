// Generated by CoffeeScript 1.8.0
(function() {
  var $, FileChecksum, SparkMD5;

  if (typeof jQuery === "undefined" || jQuery === null) {
    $ = require("jquery");
  }

  if (typeof SparkMD5 === "undefined" || SparkMD5 === null) {
    SparkMD5 = require("spark-md5");
  }

  FileChecksum = (function() {
    FileChecksum.DEFAULTS = {
      chunkSize: 2097152
    };

    function FileChecksum(file, options) {
      this.file = file;
      this.options = $.extend(FileChecksum.DEFAULTS, options);
      if (this.options.chunkSize === null || this.options.chunkSize < 2097152) {
        this.options.chunkSize = 2097152;
      }
      this.spark = new SparkMD5();
      this.fileReader = new FileReader();
      this.fileReader.onload = (function(_this) {
        return function(e) {
          _this.spark.appendBinary(e.target.result);
          _this._emitProgress();
          return _this._computeChecksum(_this.range_to);
        };
      })(this);
      this.fileReader.onerror = (function(_this) {
        return function(e) {
          return _this._emitFail(e);
        };
      })(this);
      this._deferred = $.Deferred();
      this._deferred.promise(this);
    }

    FileChecksum.prototype._computeChecksum = function(range_from) {
      var blob, chunkSize, range_to, slice;
      this.bytesWritten = range_from;
      if (this.bytesWritten === this.file.size) {
        this.clientChecksum = this.spark.end();
        this._emitDone();
        return;
      }
      range_to = this.file.size;
      chunkSize = this.options.chunkSize;
      this.range_to = Math.min(range_to, range_from + chunkSize);
      slice = this.file.slice || this.file.webkitSlice || this.file.mozSlice;
      blob = slice.call(this.file, range_from, this.range_to, this.file.type);
      return this.fileReader.readAsBinaryString(blob);
    };

    FileChecksum.prototype.stop = function() {
      this.bytesWritten = this.file.size;
      this.spark.end();
      return this._emitFail("FileChecksum stopped!");
    };

    FileChecksum.prototype._emitProgress = function(e) {
      if (e == null) {
        e = null;
      }
      return this._deferred.notifyWith(this, [e, this.bytesWritten, this.file.size]);
    };

    FileChecksum.prototype._emitDone = function() {
      return this._deferred.resolveWith(this, [this.file, this.clientChecksum]);
    };

    FileChecksum.prototype._emitFail = function(err) {
      return this._deferred.rejectWith(this, [err]);
    };

    return FileChecksum;

  })();

  module.exports = FileChecksum;

}).call(this);

//# sourceMappingURL=FileChecksum.js.map
